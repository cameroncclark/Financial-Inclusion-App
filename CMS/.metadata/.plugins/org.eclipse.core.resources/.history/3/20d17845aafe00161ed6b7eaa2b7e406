package View;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JTabbedPane;

import Controller.ActionController;
import Model.Model;

public class MainContainer {
	private Model model;
	private ActionListener actionListener;
	PanelCreator panelCreator;
	
	private JFrame jFrame;
	
	private JMenuBar jMenuBar;
	private JMenu fileMenu,settingsMenu;
	
	private JTabbedPane tabbedPane;
	
	public MainContainer(Model model, ActionListener actionListener){
		this.model = model;
		this.actionListener = actionListener;
		
		panelCreator = new PanelCreator();
		createJFrame();
		createMenus();
		createTabbedPane();
		
		jFrame.setVisible(true);
	}
	
	private void createJFrame(){
		jFrame = new JFrame();
		jFrame.setFocusable(true);
		jFrame.requestFocusInWindow();
		jFrame.getContentPane().setLayout(new BorderLayout());
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jFrame.setSize(700, 700);
	}
	
	//http://docs.oracle.com/javase/tutorial/uiswing/components/menu.html
	private void createMenus(){
		jMenuBar = new JMenuBar();
		
		fileMenu = new JMenu("File");
		settingsMenu = new JMenu("Build");
		JMenuItem build = new JMenuItem("Build for iOS and Android");
		build.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				ArrayList<String> commands = new ArrayList<String>();
			    commands.add("/bin/sh");
			    commands.add("-c");
			    commands.add("ionic");
			    
//			    SystemCommandExecutor commandExecutor = new SystemCommandExecutor(commands);
//			    int result = commandExecutor.executeCommand();
//
//			    // stdout and stderr of the command are returned as StringBuilder objects
//			    StringBuilder stdout = commandExecutor.getStandardOutputFromCommand();
//			    StringBuilder stderr = commandExecutor.getStandardErrorFromCommand();
//			    System.out.println("The numeric result of the command was: " + result);
//			    System.out.println("\nSTDOUT:");
//			    System.out.println(stdout);
//			    System.out.println("\nSTDERR:");
//			    System.out.println(stderr);
			    
			    
			    try {
					Process p = new ProcessBuilder(commands).start();
					
					BufferedReader reader = 
			                new BufferedReader(new InputStreamReader(p.getInputStream()));
			StringBuilder builder = new StringBuilder();
			String line = null;
			while ( (line = reader.readLine()) != null) {
			   builder.append(line);
			   builder.append(System.getProperty("line.separator"));
			}
			String result = builder.toString();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		settingsMenu.add(build);
		
		fileMenu.add(new JMenuItem("Test"));
		fileMenu.addSeparator();
		fileMenu.add(new JMenuItem("Another"));
		
		jMenuBar.add(fileMenu);
		jMenuBar.add(settingsMenu);
		
		jFrame.setJMenuBar(jMenuBar);
	}
	
	private void createTabbedPane(){
		tabbedPane = new JTabbedPane();
		
		JComponent categoriesPanel = panelCreator.makeCategoriesPanel(model,(ActionController)actionListener);
		tabbedPane.addTab("Categories", categoriesPanel);
		
		JComponent contentPanel = panelCreator.makeContentPanel(model,(ActionController)actionListener);
		tabbedPane.addTab("Content", contentPanel);
		
		JComponent tipsPanel = panelCreator.makeTipsPanel(model,(ActionController) actionListener);
		tabbedPane.addTab("Tips", tipsPanel);
		
		JComponent numbersPanel = panelCreator.makeNumbersPanel(model, (ActionController) actionListener); 
		tabbedPane.addTab("External numbers", numbersPanel);
		
		JComponent externalLinksPanel = panelCreator.makeLinksPanel(model, (ActionController) actionListener);
		tabbedPane.addTab("External links", externalLinksPanel);
		
		jFrame.add(tabbedPane);
	}
	
	public Panel getActivePanel(){
		return panelCreator.getActivePanel(tabbedPane.getSelectedIndex());
	}
}
